# -*- coding: utf-8 -*-
"""
@author: Salvatore Iacoletti
"""

import os
import numpy as np
from scipy.io import loadmat
import matplotlib.pyplot as plt
import eqsig



class Record():
    '''
    Ground-motion record container
    '''
    
    def __init__(self, gmr, t_step, unit="m/s2", **kwargs):
        '''
        gmr: ground motion record (changed to be always in g within the Container)
        dt: time interval of gmr
        kwargs: other information if needed
        '''
        if unit not in ["g", "m/s2"]:
            raise Exception("unit can only be 'g' or 'm/s2'")
        if len(gmr.shape) > 1:
            if gmr.shape[0] == 1:
                gmr = gmr[0,:]
            elif gmr.shape[1] == 1:
                gmr = gmr[:,0]
            else:
                raise Exception("the shape of gmr is not consistent, it should be a column vector!")
        self.gmr = np.array(gmr)
        if unit == "g":
            self.gmr = self.gmr*9.81 # make sure gmr is always in m/s2
        self.t_step = t_step
        self.pga = np.max([np.max(self.gmr), -np.min(self.gmr)])
        self.num_points = self.get_num_points()
        self.__dict__.update(kwargs)
    
    
    def get_num_points(self):
        return len(self.gmr)


    @property
    def time(self):
        # 1e-6 to avoid numerical errors
        return np.arange(0., (self.num_points-1e-6) * self.t_step, self.t_step)


    def plot_inputs(self, unit="m/s2", ax=None):
        '''
        quick and dirty plot to check
        '''
        if ax is None:
            fig, ax = plt.subplots()
        ax.set_xlabel("Time (s)")
        if unit == "g":
            ax.plot(self.time, self.gmr/9.81)
            ax.set_ylabel("Acceleration (g)")
        elif unit == "m/s2":
            ax.plot(self.time, self.gmr)
            ax.set_ylabel("Acceleration (m/s2)")
        else:
            raise Exception("unit can only be 'g' or 'm/s2'")
        plt.show()
        return ax


    def get_eqsig_record(self):
        if "record" not in self.__dict__.keys():
            self.record = eqsig.AccSignal(self.gmr, self.t_step)
        return self.record
    

    def generate_response_spectrum(self, periods=None):
        '''
        it returns Time (s) Acceleration (m/s2) in 2d array format
        '''
        # if "comp_spectrum" in self.__dict__.keys():
        #     return self.comp_spectrum
        record = self.get_eqsig_record()
        if periods is None:
            # compute the elastic response for 100 periods between T=0.01s and 5.0s
            periods = np.linspace(0.01, 5, 100)
        if not hasattr(periods, '__iter__'):
            periods = [periods]
        record.generate_response_spectrum(response_times=periods)
        times = record.response_times
        self.comp_spectrum = np.array([times, record.s_a]).T # format 2d array
        return self.comp_spectrum


    def generate_acc_vel_disp_series(self):
        '''
        it returns Time (s) Acceleration (m/s2) Velocity (m/s) Displacement (m)
        '''
        record = self.get_eqsig_record()
        record.generate_displacement_and_velocity_series()
        return record.time, record.values, record.velocity, record.displacement


    def get_spectrum(self):
        if "precomp_spectrum" in self.__dict__.keys():
            return self.precomp_spectrum
        else:
            return self.generate_response_spectrum()


    def plot_response_spectrum(self, periods=None, ax=None):
        period_sa = self.generate_response_spectrum(periods)
        if ax is None:
            fig, ax = plt.subplots()
        ax.plot(period_sa[:,0], period_sa[:,1])
        ax.set_xlabel("Response period (s)")
        ax.set_ylabel("Acceleration (m/s2)")
        plt.show()
        return ax


    def plot_comparison_spectra(self):
        if "precomp_spectrum" not in self.__dict__.keys():
            raise Exception("no precomputed response spectrum was given")
        fig, ax = self.plot_response_spectrum(self.precomp_spectrum[:,0])
        ax.plot(self.precomp_spectrum[:,0], self.precomp_spectrum[:,1])
        plt.show()


    def plot_acc_vel_disp(self, unit="m/s2", axs=None):
        time, acc, vel, disp = self.generate_acc_vel_disp_series()
        if axs is None:
            fig, axs = plt.subplots(3, sharex=True)
        if unit == "g":
            axs[0].plot(time, acc/9.81)
            axs[0].set_ylabel("Acceleration (g)")
        elif unit == "m/s2":
            axs[0].plot(time, acc)
            axs[0].set_ylabel("Acceleration (m/s2)")
        else:
            raise Exception("unit can only be 'g' or 'm/s2'")
        axs[1].plot(time, vel)
        axs[1].set_ylabel("Velocity (m/s)")
        axs[2].plot(time, disp)
        axs[2].set_xlabel("Time (s)")
        axs[2].set_ylabel("Displacement (m)")
        plt.show()
        return axs


    @classmethod
    def load_simbad_record(cls, path, allinfo=False, spectrum_path=None):
        data = loadmat(path)["record"]
        gmr = data[2:]
        t_step = data[1][0]
        kwargs = {"path": path, "database": "simbad"}
        if allinfo:
            if spectrum_path is not None:
                precomp_spectrum = loadmat(spectrum_path)["spettro"]
                kwargs["precomp_spectrum"] = precomp_spectrum
        self = cls(gmr, t_step=t_step, unit="m/s2", **kwargs)
        return self


    @classmethod
    def load_goda_record(cls, path, allinfo=False, data=None):
        with open(path) as f:
            lines = f.readlines()
        gmr = list()
        for line in lines:
            gmr.append(float(line))
        gmr = np.array(gmr)
        other_path = os.path.join(os.path.dirname(path), "MSASinfo.mat")
        if data is None:
            data = loadmat(other_path)
        filename = os.path.basename(path).replace(".dat","")
        msas = filename.split("_")[0]
        h1h2 = filename.split("_")[1]
        _id = int(filename.split("_")[2])-1
        t_step = data["DT"][_id][0]
        kwargs = {"path": path, "database": "goda"}
        if allinfo:
            if other_path is not None:
                precomp_spectrum = np.vstack([data["Tn_RS"][0],
                                              data["PSA_Rec"+h1h2][_id]]).T
                kwargs["precomp_spectrum"] = precomp_spectrum
        '''
        SequenceRecInfoMS and SequenceRecInfoAS
        Column 1 : Database ID - 1) Crustal-NGA, 2) Crustal-KKiKSK, 3) Interface, 4) Inslab
        Column 2 : Record ID (based on original databases)
        Column 3 : Event ID (based on original databases)
        Column 4 : Magnitude
        Column 5 : Depth (km)
        Column 6 : Distance - Rhypo (km)
        Column 7 : Distance - Rrup (km)
        Column 8 : Vs30 (m/s)
        Column 9 : Network ID - 0) NGA database; 1) K-NET, 2) KiK-net (surface), 3) KiK-net (borehole), 4) SK-net
        Column 10: Number of records in a sequence (SequenceRecInfoMS only)
        '''
        self = cls(gmr, t_step=t_step, unit="m/s2", **kwargs)
        return self


    def __repr__(self):
        return self.__str__()
        
    def __str__(self):
        string = "<{} ".format(self.__class__.__name__) + \
               str(self.num_points) + " points" + \
               ", t_step: {:.4f}".format(self.t_step) + \
               ", pga: {:.3f}".format(self.pga) + "m/s2"
        if "database" in self.__dict__.keys():
            string = string + ", database: " + self.database
        return string+">"

