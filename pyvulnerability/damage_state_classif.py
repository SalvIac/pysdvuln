# -*- coding: utf-8 -*-
"""
@author: Salvatore Iacoletti
"""

import numpy as np


class DamageStateClassif():
    '''
    damage states from capacity according to Martins and Silva (2020)
    '''
    def __init__(self, thresholds=None, capacity_curve=None):
        if capacity_curve is not None and thresholds is not None:
            raise Exception("specify thresholds or capacity_curve")
        if capacity_curve is not None:
            self.thresholds = self.get_displ_thresholds(capacity_curve)
        elif thresholds is not None:
            if isinstance(thresholds, np.ndarray):
                thresholds = thresholds.tolist()
            self.thresholds = thresholds
        else:
            raise Exception("cannot specify both thresholds and capacity_curve")
            


    @classmethod
    def get_displ_thresholds(cls, capacity_curve):
        '''
        capacity curve defined as Sa[g]-Sd[m]
        displacement thresholds defined according to Martins and Silva (2020)
        '''
        if capacity_curve.shape[0] == 3:
            dy = capacity_curve[1,0]
        else:
            dy = capacity_curve[2,0]
        du = capacity_curve[-1,0]
        thresholds = [0.75*dy, 0.5*dy+0.33*du, 0.25*dy+0.67*du, du]
        return thresholds

    
    def classify(self, drift):
        return np.searchsorted(self.thresholds+[1e9], drift)
    
    
    def get_ds_drift(self, ds):
        if ds == 0:
            # DS=0 means undamaged structure
            return 0.
        return self.thresholds[ds-1]
    
    