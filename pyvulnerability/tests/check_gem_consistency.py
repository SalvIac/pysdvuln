# -*- coding: utf-8 -*-
"""
@author: Salvatore Iacoletti
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import openseespy.opensees as ops
from myutils.search_file_in_folder import (search_filenames_in_folder,
                                           search_filepaths_in_folder)
from pyvulnerability.base_sdof import BaseSDOF
bsd = BaseSDOF()
from scipy.optimize import minimize


class Temp():
    
    def __init__(self, storeys, yield_drift, ultim_drift, floor_height, gamma):
        self.yield_drift = yield_drift
        self.ultim_drift = ultim_drift
        self.floor_height = floor_height
        self.gamma = gamma
        self.storeys = storeys
        self.tot_height = storeys*floor_height
        self.height_floors = np.arange(0,storeys+1)*floor_height
        if storeys <= 2:
            self.def_shape = (self.height_floors/self.tot_height)
        else:
            self.def_shape = 4/3*(self.height_floors/self.tot_height) * \
                                 (1-(self.height_floors/(4*self.tot_height)))
    
    def ratio_ultim(self, top_disp):
        max_inter_drift = np.max(np.diff(self.def_shape)*top_disp/self.floor_height)
        return np.abs(self.ultim_drift/max_inter_drift-1)

    def ratio_yield(self, top_disp):
        max_inter_drift = np.max(np.diff(self.def_shape)*top_disp/self.floor_height)
        return np.abs(self.yield_drift/max_inter_drift-1)
    
    def plot(self, top_disp):
        fig, ax = plt.subplots(1,1)
        ax.plot(np.zeros_like(self.height_floors), self.height_floors, color="k", marker="o")
        ax.plot(top_disp*self.def_shape, self.height_floors, color="r", marker="o")
        ax.set_xlabel("displacement shape")
        ax.set_ylabel("height (m)")
        plt.show()


if __name__ == '__main__':
    
    # base = r"C:\Users\Salvatore\Documents\GitHub/"
    base = r"C:\Users\Salvatore\Dropbox\SalvIac/"
    path = base+"global_fragility_vulnerability\capacity/"
    
    base_class = "CR_LFM-DUH_H"
    
    yield_drift = 0.77/100
    ultim_drift = 3.4/100
    floor_height = 2.8
    gamma = 1.4
    
    ultim_disps = list()
    yield_disps = list()
    computed_ultim_disps = list()
    computed_yield_disps = list()
    for i in range(10):
        storeys = i+1
        
        te = Temp(storeys, yield_drift, ultim_drift, floor_height, gamma)
        res = minimize(te.ratio_yield, 0., method='Nelder-Mead', bounds=[(0., np.inf)])
        computed_yield_disps.append( res.x[0] )
        res = minimize(te.ratio_ultim, 0., method='Nelder-Mead', bounds=[(0., np.inf)])
        computed_ultim_disps.append( res.x[0] )

        building_class = base_class+str(storeys)+".csv"
        capacity_curve = pd.read_csv(path+building_class).to_numpy()
        ultim_disps.append( capacity_curve[-1,0]*gamma )
        yield_disps.append( capacity_curve[2,0]*gamma )
    
    
    fig, axs = plt.subplots(2,2, sharex=True)
    
    axs[0,0].plot(np.arange(1, 11), computed_ultim_disps, label="computed")
    axs[0,0].plot(np.arange(1, 11), ultim_disps, label="GEM")
    axs[0,0].set_title("ultimate point")
    axs[0,0].set_ylabel("top displacement (m)")
    axs[1,0].plot(np.arange(1, 11), np.array(computed_ultim_disps)/np.array(ultim_disps))
    axs[1,0].set_xlabel("number of storeys")
    axs[1,0].set_ylabel("computed/GEM")

    axs[0,1].plot(np.arange(1, 11), computed_yield_disps, label="computed")
    axs[0,1].plot(np.arange(1, 11), yield_disps, label="GEM")
    axs[0,1].set_title("yielding point")
    axs[0,1].set_ylabel("top displacement (m)")
    axs[0,1].legend()
    axs[1,1].plot(np.arange(1, 11), np.array(computed_yield_disps)/np.array(yield_disps))
    axs[1,1].set_xlabel("number of storeys")
    axs[1,1].set_ylabel("computed/GEM")

    plt.show()
    
