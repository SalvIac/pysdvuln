# -*- coding: utf-8 -*-
"""
@author: Salvatore Iacoletti
"""

import os
from copy import deepcopy
import numpy as np
import pandas as pd
from tqdm import tqdm
import matplotlib.pyplot as plt
from scipy.optimize import dual_annealing
import time 
from myutils.utils_pickle import save_pickle, load_pickle
from pyvulnerability.records_container import RecordsContainer
from pyvulnerability.selector import Selector
from pyvulnerability.opensees_runner import OpenseesRunner
from pyvulnerability.damage_state_classif import DamageStateClassif
from pyvulnerability.record_pair import RecordPair
from pyvulnerability.psdm_gg21 import PSDM_gg21
from pyvulnerability.damg_dep_frag_curves_noc import DamgDepFragCurvesNoC
from pyvulnerability.damg_dep_frag_curves import DamgDepFragCurves
from pyvulnerability.damg_dep_vuln_curves import DamgDepVulnCurves

from scipy.stats import lognorm
from scipy.optimize import curve_fit

def log(x, s, scale):
    return lognorm.cdf(x, s, 0., scale)


if __name__ == "__main__":
    
    # curve = "CR_LFINF-DUL_H4"
    # curve = "CR_LFINF-DUM_H4"
    # curve = "CR_LFINF-DUH_H4"
    # curve = "CR_LFM-DUL_H4"
    curve = "CR_LFM-DUM_H4"
    # curve = "CR_LFM-DUH_H4"
    
    path = r"C:\Users\Salvatore\Dropbox\SalvIac\global_fragility_vulnerability\fragility_curves\fragility_other_IMs/"
    filepath = path+curve+".csv"
    frags_main = pd.read_csv(filepath)
    im = frags_main.columns[0]
    if "PGA" in im:
        fund_period = 0.
    else:
        fund_period = float(im.replace("SA(","").replace("s) [g]",""))    
    print(fund_period)
    
    
    #%% fit lognormal
    
    frags_params = dict()
    for i in range(4):
        params = [0.1, 1.]
        popt, pcov = curve_fit(log, frags_main.iloc[:,0], frags_main.iloc[:,1+i], p0=params)
        frags_params["DS"+str(i+1)] = {"mu": popt[1], "sigma": popt[0]}
        
        plt.figure()
        plt.scatter(frags_main.iloc[:,0], frags_main.iloc[:,1+i])
        plt.plot(frags_main.iloc[:,0], log(frags_main.iloc[:,0], *popt))
        plt.plot(frags_main.iloc[:,0], lognorm.pdf(frags_main.iloc[:,0], popt[0], 0., popt[1]))
    

    #%%
    
    opr = OpenseesRunner.from_oq(curve)
    dsc = DamageStateClassif(capacity_curve=opr.capacity_curve)


    #%% run all selected ground motions with opensees    

    # name = "nga"
    # n = 1000
    # rec_pairs = load_pickle(name+"_"+str(n)+"_pairs_sa_2_{}".format(str(fund_period).replace(".","")))
    # res = list()
    # for i, rec in tqdm(enumerate(rec_pairs)):
    #     _ = opr.run(rec["rp"].get_time_gmr(unit="m/s2"))
    #     res.append( deepcopy(rec) )
    #     res[-1]["opr"] = deepcopy(opr)
    # save_pickle(res, "nltha_"+curve)
    res = load_pickle("nltha_"+curve)
    
    
    #%% PSDM and fragility curves from Gentile and Galasso (2021)

    psdm = PSDM_gg21.from_analyses(res, dsc, zero_tol=4e-2)
    psdm.check_plots()

    # no collapses
    ddfc = DamgDepFragCurvesNoC(psdm, dsc)
    ddfc.beta = np.sqrt(ddfc.beta**2+0.3**2)
    ddfc.check_plots(unit="g", imt="SA(T1)")
    df = ddfc.get_frags_params_df(unit="g")
    
    print(df)
    print(frags_params)
    
    
    #%% plot fragilities
    
    from scipy.stats import norm
    
    imt="SA(T1)"
    unit="g"
    
    x_ims = np.logspace(np.log10(1e-2), np.log10(2), 100)
    P_ds = ddfc.get_fragilities(x_ims, unit)
    
    fig, ax = plt.subplots(figsize=(6,6))
    ds1 = 0
    for ds2 in range(1,5):
        color = ["b", "m", "g", "r"][ds2-1]

        label = "DS"+str(ds2)+" computed"
        ax.plot(x_ims, P_ds[(ds1, ds2)], lw=1, ls='-', color=color, label=label)

        label = "DS"+str(ds2)+" GEM"
        
        mu, beta = frags_params["DS"+str(ds2)]["mu"], frags_params["DS"+str(ds2)]["sigma"]
        
        ax.plot(x_ims, norm.cdf((np.log(x_ims) - np.log(mu))/beta), lw=1, ls='--', color=color, label=label)
        ax.scatter(frags_main.iloc[:,0], frags_main.iloc[:,ds2], color=color)
        
    ax.set_xlabel('{} ({})'.format(imt, unit))
    ax.set_ylabel('P(DS >= ds | IM)')
    ax.legend()
    ax.set_ylim(0.,1.)
    ax.set_xlim(0.,2.)
    plt.show()
    
    
    
      