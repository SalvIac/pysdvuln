# -*- coding: utf-8 -*-
"""
@author: Salvatore Iacoletti
"""

import numpy as np
from scipy.stats import norm
import matplotlib.pyplot as plt
from matplotlib import cm
from sklearn.linear_model import LogisticRegression
from scipy.special import expit
from pyvulnerability.damg_dep_frag_curves_noc import DamgDepFragCurvesNoC
from pyvulnerability.prob_collapse import ProbCollapse


class DamgDepFragCurves(DamgDepFragCurvesNoC):
    
    def __init__(self, psdm, dsc, sigmab2b=0.):
        super().__init__(psdm, dsc, sigmab2b)
        self.pc = ProbCollapse(psdm)

    
    def eval_expit(self, disp1, ims2_g):
        return expit(self.alphas[0] + self.alphas[1]*np.log(disp1) + self.alphas[2]*np.log(ims2_g))


    def get_prob_coll(self, ims, ds1=0, unit="g"):
        if unit == "g":
            ims_g = ims
        else:
            ims_g = ims/9.81
        thresh = self.dsc.get_ds_thresh(ds1) # displacement-based threshold
        if thresh == 0.:
            thresh = 1e-15
        
        return self.pc(thresh*np.ones_like(ims_g), ims_g)
        

    def get_prob_no_coll(self, ims, ds1=0, unit="g"):
        return 1. - self.get_prob_coll(ims, ds1, unit)


    def get_fragility(self, ims, ds2, ds1=0, unit="m/s2"):
        '''
        this is tricky, everything else is done with IM in m/s2, while the
        alphas from Jalayer et al. (2017) use g.
        '''
        if unit == "g":
            ims = ims*9.81 # convert to m/s2
        mu, beta = self.get_frag_params(ds2, ds1)
        return norm.cdf((np.log(ims) - np.log(mu))/beta) * \
               self.get_prob_no_coll(ims, ds1, unit="m/s2") + \
               self.get_prob_coll(ims, ds1, unit="m/s2")


    def check_plots(self, unit="m/s2", imt="IM"):
        self.pc.check_plots()
        super().check_plots(unit, imt)
        
                   
    def __repr__(self):
        return self.__str__()
        
    def __str__(self):
        return "<{}>".format(self.__class__.__name__)
        

