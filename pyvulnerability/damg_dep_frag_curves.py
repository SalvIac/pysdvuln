# -*- coding: utf-8 -*-
"""
@author: Salvatore Iacoletti
"""

import numpy as np
from scipy.stats import norm
import matplotlib.pyplot as plt


class DamgDepFragCurves():
    
    def __init__(self, psdm, dsc):
        self.psdm = psdm
        edp  = psdm.hysts_g12
        filt = np.where(edp>0)[0]
        edp = edp[filt]
        psd = psdm(psdm.maxds_g1[filt], psdm.ims_g2[filt])

        a = psdm.a
        b = psdm.b
        c0 = psdm.c0
        d = psdm.d
        m = psdm.m
        
        self.sigma_psdm = (np.sum((np.log(edp) - np.log(psd))**2)/(len(edp)-2))**0.5
        self.residuals_edp = psd-edp
        self.beta  = self.sigma_psdm/d
        
        self.E_ds = dict()
        for ds in range(0,5):
            self.E_ds[ds] = a * dsc.get_ds_drift(ds) ** b
        
        self.mus = dict()
        for ds1 in range(0,5):
            for ds2 in range(0,5):
                if ds2 > ds1:
                    self.mus[(ds1,ds2)] = ((self.E_ds[ds2] - self.E_ds[ds1]) / \
                                 (c0*(1 - m * dsc.get_ds_drift(ds1)))) ** (1/d)
        
    
    def get_frag_params(self, ds2, ds1=0):
        '''
        ds1 = 0 returns the mainshock fragility
        ds1 != 0 returns the aftershock fragility for ds2
        '''
        if ds2 == 0:
            raise Exception("check ds2, it cannot be zero")
        return self.mus[(ds1, ds2)], self.beta
    
    
    def get_fragility(self, ims, ds2, ds1=0):
        mu, beta = self.get_frag_params(ds2, ds1)
        return norm.cdf((np.log(ims) - np.log(mu))/beta)


    def get_fragilities(self, ims):
        P_ds = dict()
        for (ds1, ds2) in self.mus.keys():
            P_ds[(ds1, ds2)] = self.get_fragility(ims, ds2, ds1)
        return P_ds

    
    def check_plots(self):
        x_ims = np.arange(0.01, np.max(self.psdm.ims_g2), 0.01)
        P_ds = self.get_fragilities(x_ims)
        
        fig, ax = plt.subplots(figsize=(6,6))
        for (ds1, ds2) in P_ds.keys():
            if ds1 == 0:
                label = "DS"+str(ds2)
                ls = '-'
            else:
                label = "DS"+str(ds2)+"|DS"+str(ds1)
                ls = ["--", "-.", ":"][ds1-1]
            color = ["b", "m", "g", "r"][ds2-1]
            ax.plot(x_ims, P_ds[(ds1, ds2)], lw=1, ls=ls, color=color, label=label)
        ax.set_xlabel('avgSA (m/s2)')
        ax.set_ylabel('P(DS-G2 >= ds | IM, DS-G1)')
        ax.legend()
        ax.set_xlabel('avgSA (m/s2)')
        ax.set_ylabel('P(DS-G2 >= ds | IM, DS-G1)')
        ax.legend()
        ax.set_ylim(0.,1.)
        # ax.xlim(xmin=0)
        # ax.ylim(ymin=0)
        
        plt.figure()
        plt.scatter(self.psdm.ims_g1, self.psdm.maxds_g1)
        plt.xscale('log')
        plt.yscale('log')
        
        # plt.figure()
        # plt.scatter(psdm.ims_g1[filt], psdm.maxds_g1[filt])
        # plt.xscale('log')
        # plt.yscale('log')
        
        plt.figure()
        plt.plot(range(len(self.residuals_edp)), self.residuals_edp, 's')
        
        plt.show()
        
    