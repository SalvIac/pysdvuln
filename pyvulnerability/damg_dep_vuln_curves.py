# -*- coding: utf-8 -*-
"""
@author: Salvatore Iacoletti
"""

import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt


class DamgDepVulnCurves():
    
    
    def __init__(self, ddfc, d2l):
        self.ims = ddfc.x_ims_g # in g by default
        self.vulns = dict()
        for ds1 in range(0,4):
            frags = list()
            for ds2 in range(ds1+1, 5):
                frags.append( ddfc.get_fragility(self.ims*9.81, ds2, ds1) )
            frags = np.array(frags).T
            temp1 = np.insert(frags, 0, np.ones_like(frags[:,0]), axis=1)
            temp2 = np.insert(frags, frags.shape[1], np.zeros_like(frags[:,0]), axis=1)
            prob_ds = temp1 - temp2
            dmg2loss_mesh = np.meshgrid(d2l.get_mean_loss()[ds1:], np.ones_like(frags[:,0]))[0]
            self.vulns[ds1] = np.sum( prob_ds * dmg2loss_mesh, axis=1 )
    

    def get_ims(self, unit="g"):
        if unit == "g":
            ims = self.ims
        else:
            ims = self.ims*9.81
        return ims
    
    
    def get_vuln_curve_ds1(self, ds1):
        return self.vulns[ds1]
     
        
    def get_vuln_curves(self):
        return self.vulns
     
     
    def get_vuln_curves_df(self, unit="g"):
         ims = self.get_ims(unit)
         data = {"im": ims}
         for ds1 in self.vulns.keys():
             if ds1 == 0:
                 label = "Mainshock"
             else:
                 label = "Initial DS"+str(ds1)
             data[label] = self.vulns[ds1]
         return pd.DataFrame(data)
        
    
    def check_plots(self, unit="g", imt="IM", save=False, path=None,
                    max_img=None):
        if max_img is None:
            inds = np.ones_like(self.ims, dtype=bool)
        else:
            inds = self.ims <= max_img
        fig = plt.figure()
        for ds1 in range(0,4):
            if unit == "g":
                plt.plot(self.ims[inds], self.vulns[ds1][inds],
                         label="ds"+str(ds1))
            else:
                plt.plot(self.ims[inds]*9.81, self.vulns[ds1][inds],
                         label="ds"+str(ds1))
        plt.legend(framealpha=0.5)
        plt.xlabel('{} ({})'.format(imt, unit))
        plt.ylabel('Loss Ratio')
        if save:
            fig.savefig(os.path.join(path, "vuln.png"),
                        bbox_inches='tight', dpi=600, format="png")
        else:
            plt.show()

    
    def __repr__(self):
        return self.__str__()
        
    def __str__(self):
        return "<{}>".format(self.__class__.__name__)

