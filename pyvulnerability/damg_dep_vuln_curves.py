# -*- coding: utf-8 -*-
"""
@author: Salvatore Iacoletti
"""

import numpy as np
import matplotlib.pyplot as plt


class DamgDepVulnCurves():
    
    dmg2loss = [0., 0.01, 0.1, 0.55, 1.]
    
    def __init__(self, ddfc, ims, unit="m/s2"):
        if unit == "g":
            ims = ims*9.81 # convert to m/s2
        self.ims = ims
        self.vulns = dict()
        for ds1 in range(0,4):
            frags = list()
            for ds2 in range(ds1+1, 5):
                frags.append( ddfc.get_fragility(ims, ds2, ds1) )
            frags = np.array(frags).T
            temp1 = np.insert(frags, 0, np.ones_like(frags[:,0]), axis=1)
            temp2 = np.insert(frags, frags.shape[1], np.zeros_like(frags[:,0]), axis=1)
            prob_ds = temp1 - temp2
            dmg2loss_mesh = np.meshgrid(self.dmg2loss[ds1:], np.ones_like(frags[:,0]))[0]
            self.vulns[ds1] = np.sum( prob_ds * dmg2loss_mesh, axis=1 )
    
    
    def get_vuln_curve_ds1(self, ds1, unit="m/s2"):
        if unit == "g":
            return self.ims/9.81, self.vulns[ds1]
        else:
            return self.ims, self.vulns[ds1]
     
    
    def check_plots(self, unit="m/s2", imt="IM"):
        plt.figure()
        for ds1 in range(0,4):
            if unit == "g":
                plt.plot(self.ims/9.81, self.vulns[ds1], label="ds"+str(ds1))
            else:
                plt.plot(self.ims, self.vulns[ds1], label="ds"+str(ds1))
        plt.legend()
        plt.xlabel('{} ({})'.format(imt, unit))
        plt.ylabel('Loss Ratio')
        plt.show()
    
    
    def __repr__(self):
        return self.__str__()
        
    def __str__(self):
        return "<{}>".format(self.__class__.__name__)
    

    
    